name: Test Newman Junit
on:
  push:
    branches:
      - main
jobs:
  test-api:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install Node on the runner
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: "20.x"


      # Install the Newman command line utility and also install the HTML extra reporter
      - name: Install Newman
        run: |
          npm install -g newman
          npm install -g newman-reporter-junitfull
      # Make a directory to upload the test results
      - name: Make a Directory for results
        run: mkdir -p TestResults


      # Run the POSTMAN collection
      - name: Run POSTMAN collection
        run: |
          newman run Regression.postman_collection.json -e Regression.Azure.postman_environment.json  -x --reporters  cli,junit --reporter-junit-export ${{ github.workspace }}/TestResults/regressionJunit.xml

      #- name: Run POSTMAN collection URL
      #  run: |
      #    newman run https://api.postman.com/collections/1273809-5423fc7b-26df-4dec-8686-a4f45be6d3f3?access_key=PMAT-01H13A9RB9YWED6FK5DJ4WACMB -e Regression.Azure.postman_environment.json -x --reporters  cli,junit --reporter-junit-export ${{ github.workspace }}/TestResults/regressionJunit.xml

      # Upload report as artifact
      - uses: actions/upload-artifact@v3
        with:
          name: java-junit
          path: ${{ github.workspace }}/TestResults/regressionJunit.xml

      - name: Test Report Junit
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Junit Tests           # Name of the check run which will be created
          path: ${{ github.workspace }}/TestResults/*.xml     # Path to test results
          reporter: java-junit       # Format of test results
